
class Policy
	types
		public CombAlg = <denyOverrides> | <permitOverrides>;
		public Effect = <Permit> | <Deny> | <Indeterminate> | <notApplicable>;
	instance variables
		private target : Target;
		private rules : seq of Rule;
		private ruleCombAlg: CombAlg;
	operations
	
			public Policy: Target * seq of Rule * CombAlg ==> Policy
			Policy(t, r, rca) ==
				(target := t;
				 rules := r;
				 ruleCombAlg := rca;
				 return self);
			
			public GetTarget: () ==> Target
			GetTarget() ==
				(return target);
				
			public GetRules: () ==> seq of Rule
			GetRules() ==
				(return rules);
				
			public GetRuleCombAlg: () ==> CombAlg
			GetRuleCombAlg() ==
				(return ruleCombAlg);
				
			public GetRulesByEffect: Effect ==> seq of Rule
			GetRulesByEffect(effect) ==
				(dcl permits : seq of Rule := [];
				 for r in rules do (
				 		if(r.GetEffect() = effect)
				 		then permits := permits ^ [r];
				 );
				 return permits;
				)
				pre len rules <> 0;
				
end Policy