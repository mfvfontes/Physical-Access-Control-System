
class Policy
	types
		public CombAlg = <denyOverrides> | <permitOverrides>;
		public Effect = <Permit> | <Deny> | <Indeterminate> | <notApplicable>;
	instance variables
		private target : Target;
		private rules : set of Rule;
		private ruleCombAlg: CombAlg;
		
		inv forall r in set rules & r.GetTarget() = target;
		--[r | r in set rules & r.GetTarget() = target];
		
	operations
	
			public Policy: Target * set of Rule * CombAlg ==> Policy
			Policy(t, r, rca) ==
				(target := t;
				 rules := r;
				 ruleCombAlg := rca;
				 return self)
				pre (card r > 0)
			  post (target = t and 
			  			rules = r and
			  			ruleCombAlg = rca);
			
			public GetTarget: () ==> Target
			GetTarget() ==
				(return target);
				
			public SetTarget: Target ==> ()
			SetTarget(t) ==
				(target := t)
				post (target = t);
				
			public GetRules: () ==> set of Rule
			GetRules() ==
				(return rules);
				
			public SetRules: set of Rule ==> ()
			SetRules(r) ==
				(rules := r)
				pre (card r > 0)
				post (rules = r);
				
			public GetRuleCombAlg: () ==> CombAlg
			GetRuleCombAlg() ==
				(return ruleCombAlg);
				
			public SetRuleCombAlg: CombAlg ==> ()
			SetRuleCombAlg(rca) ==
				(ruleCombAlg := rca)
				post (ruleCombAlg = rca);
				
			public GetRulesByEffect: Effect ==> set of Rule
			GetRulesByEffect(effect) ==
				(dcl permits : set of Rule := {};
				 for all r in set rules do (
				 		if(r.GetEffect() = effect)
				 		then permits := permits union {r};
				 );
				 return permits;
				)
				pre (card rules > 0);
				
				-- Still need to check the pre and post conditions
				
			public GetDecision: () ==> Effect
			GetDecision() ==
				(dcl decision : Effect := <Deny>;
				 for all r in set rules do (
				 	if(ruleCombAlg = <denyOverrides>)
				 	then (if(r.GetEffect() = <Deny>)
				 			 then (decision := <Deny>;
				 			 			return decision))
				 	elseif(ruleCombAlg = <permitOverrides>)
				 	then (if(r.GetEffect() = <Permit>)
				 			 then (decision := <Permit>;
				 			 			return decision))
				 );
				 decision := <Indeterminate>;
				 return decision;
				)
				pre (card rules > 0 and
						 ruleCombAlg <> nil);
				
end Policy