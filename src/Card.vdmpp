
class Card
	types
		public Identifier = int;
		public Date :: year : nat month : nat day : nat;
	instance variables
		private identifier : Identifier;
		private exp_date : Date;
		
		inv exp_date.day <= 31 and
			  exp_date.month <= 12 and
			  if exp_date.month in set {4, 6, 9, 11}
			  then exp_date.day <= 30
			  else (exp_date.month = 2) => (exp_date.day <= 29);
			
	operations
		
		public Card: Identifier * Date ==> Card
		Card (id, ed) ==
			(identifier := id;
			 exp_date := ed;
			 return self)
		post (exp_date = ed and 
					identifier = id);
		
		public GetID: () ==> Identifier
		GetID() ==
			(return identifier);
		
		public GetExpDate: () ==> Date
		GetExpDate() ==
			(return exp_date);
		
		public SetExpDate: Date ==> ()
		SetExpDate(d) ==
			(exp_date := d)
		post (exp_date = d);
		
		public RemoveExpDate: () ==> ()
		RemoveExpDate() ==
			(dcl date : Date;
			 date.day := 1;
			 date.month := 1;
			 date.year := 1900;
			 exp_date := date)
		pre (exp_date.day <> 1 and 
				 exp_date.month <> 1 and 
				 exp_date.year <> 1900);
		
end Card